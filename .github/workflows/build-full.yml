name: Universal Soul AI - Full Featured APK Build

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - release

jobs:
  build-full:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential git python3-dev python3-pip python3-venv \
          libssl-dev libffi-dev autoconf libtool pkg-config \
          zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo6 \
          zip unzip wget curl ffmpeg \
          libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
          libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev
          
    - name: Install Python dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip setuptools wheel
        pip install buildozer==1.5.0 cython==0.29.33 "python-for-android==2024.1.21"
        pip install kivy[base]==2.1.0 kivymd==1.1.1 plyer pyjnius
        pip install pillow requests numpy websockets psutil python-dotenv
        
    - name: Install Android SDK and NDK
      run: |
        source venv/bin/activate
        
        # Use global buildozer directory for SDK/NDK
        mkdir -p ~/.buildozer/android/platform
        cd ~/.buildozer/android/platform
        
        # Download and install SDK
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mkdir -p android-sdk/cmdline-tools
        mv cmdline-tools android-sdk/cmdline-tools/latest
        
        export ANDROID_HOME=$PWD/android-sdk
        export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
        
        # Accept licenses and install components
        yes | sdkmanager --licenses
        sdkmanager "platforms;android-31" "build-tools;31.0.0" "ndk;25.2.9519653"
        
        # Also copy to workspace location for environment variables
        mkdir -p ${{ github.workspace }}/android_overlay/.buildozer/android/platform
        cp -r android-sdk ${{ github.workspace }}/android_overlay/.buildozer/android/platform/
        cp -r android-ndk-r25.2.9519653 ${{ github.workspace }}/android_overlay/.buildozer/android/platform/
        
    - name: Prepare app files
      working-directory: android_overlay
      run: |
        source ../venv/bin/activate
        
        # Create main.py if missing
        if [ ! -f main.py ]; then
          echo "Creating main.py entry point..."
          echo "# Universal Soul AI - Main Entry Point" > main.py
          echo "" >> main.py
          echo "try:" >> main.py
          echo "    from main_complete import UniversalSoulApp" >> main.py
          echo "    USE_COMPLETE = True" >> main.py
          echo "except ImportError:" >> main.py
          echo "    print('main_complete.py not found, using fallback app')" >> main.py
          echo "    USE_COMPLETE = False" >> main.py
          echo "" >> main.py
          echo "if __name__ == '__main__':" >> main.py
          echo "    if USE_COMPLETE:" >> main.py
          echo "        try:" >> main.py
          echo "            app = UniversalSoulApp()" >> main.py
          echo "            app.run()" >> main.py
          echo "        except Exception as e:" >> main.py
          echo "            print('Error with complete app:', e)" >> main.py
          echo "            USE_COMPLETE = False" >> main.py
          echo "    " >> main.py
          echo "    if not USE_COMPLETE:" >> main.py
          echo "        from kivy.app import App" >> main.py
          echo "        from kivy.label import Label" >> main.py
          echo "        from kivy.clock import Clock" >> main.py
          echo "        " >> main.py
          echo "        class UniversalSoulApp(App):" >> main.py
          echo "            def build(self):" >> main.py
          echo "                label = Label(" >> main.py
          echo "                    text='Universal Soul AI\\nMobile App\\n\\nInitializing...\\nVersion 1.0.0'," >> main.py
          echo "                    halign='center'," >> main.py
          echo "                    valign='middle'" >> main.py
          echo "                )" >> main.py
          echo "                label.bind(size=label.setter('text_size'))" >> main.py
          echo "                return label" >> main.py
          echo "        " >> main.py
          echo "        UniversalSoulApp().run()" >> main.py
        fi
        
        # Create assets
        mkdir -p assets
        python3 -c "from PIL import Image; icon = Image.new('RGBA', (512, 512), (33, 150, 243, 255)); icon.save('assets/icon.png'); splash = Image.new('RGB', (1080, 1920), (33, 150, 243)); splash.save('assets/presplash.png'); print('Assets created')"
        
    - name: Configure buildozer
      working-directory: android_overlay
      run: |
        source ../venv/bin/activate
        
        # Create buildozer.spec
        echo "[app]" > buildozer.spec
        echo "title = Universal Soul AI" >> buildozer.spec
        echo "package.name = universalsoulai" >> buildozer.spec
        echo "package.domain = com.universalsoul.ai" >> buildozer.spec
        echo "source.dir = ." >> buildozer.spec
        echo "source.include_exts = py,png,jpg,kv,atlas,json,txt,md" >> buildozer.spec
        echo "source.include_patterns = assets/*,core/*,ui/*,demo/*,tests/*" >> buildozer.spec
        echo "version = 1.0.0" >> buildozer.spec
        echo "requirements = kivy==2.1.0,kivymd==1.1.1,plyer,pyjnius,android,pillow,requests,numpy" >> buildozer.spec
        echo "presplash.filename = assets/presplash.png" >> buildozer.spec
        echo "icon.filename = assets/icon.png" >> buildozer.spec
        echo "orientation = portrait" >> buildozer.spec
        echo "fullscreen = 0" >> buildozer.spec
        echo "" >> buildozer.spec
        echo "android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE,CAMERA,RECORD_AUDIO,SYSTEM_ALERT_WINDOW,VIBRATE,ACCESS_NETWORK_STATE,WAKE_LOCK,FOREGROUND_SERVICE,ACCESSIBILITY_SERVICE,BIND_ACCESSIBILITY_SERVICE,DRAW_OVER_OTHER_APPS" >> buildozer.spec
        echo "android.api = 31" >> buildozer.spec
        echo "android.minapi = 23" >> buildozer.spec
        echo "android.ndk = 25.2.9519653" >> buildozer.spec
        echo "android.accept_sdk_license = True" >> buildozer.spec
        echo "android.arch = arm64-v8a" >> buildozer.spec
        echo "android.gradle_dependencies = androidx.core:core:1.8.0, androidx.appcompat:appcompat:1.5.0" >> buildozer.spec
        echo "" >> buildozer.spec
        echo "[buildozer]" >> buildozer.spec
        echo "log_level = 2" >> buildozer.spec
        
        echo "Created buildozer.spec"
        
    - name: Build APK
      working-directory: android_overlay
      env:
        ANDROID_HOME: /home/runner/.buildozer/android/platform/android-sdk
        ANDROID_SDK_ROOT: /home/runner/.buildozer/android/platform/android-sdk
      run: |
        source ../venv/bin/activate
        
        BUILD_TYPE="${{ github.event.inputs.build_type || 'debug' }}"
        echo "Building Universal Soul AI APK ($BUILD_TYPE)..."
        echo "Working directory: $(pwd)"
        echo "Files present:"
        ls -la
        
        echo "Checking buildozer.spec:"
        cat buildozer.spec
        
        echo "Checking main.py:"
        head -10 main.py
        
        echo "Environment variables:"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        
        # Build with retry logic
        for attempt in 1 2 3; do
          echo "Build attempt $attempt/3..."
          if buildozer android $BUILD_TYPE --verbose; then
            echo "Build successful on attempt $attempt"
            break
          else
            echo "Build failed on attempt $attempt"
            if [ $attempt -lt 3 ]; then
              buildozer android clean
              sleep 10
            else
              echo "All build attempts failed"
              find .buildozer -name "*.log" -type f | head -3 | xargs tail -50
              exit 1
            fi
          fi
        done
        
    - name: Verify APK
      working-directory: android_overlay
      run: |
        echo "Searching for APK files..."
        find . -name "*.apk" -type f -exec ls -lh {} \;
        
        APK_FILE=$(find . -name "*.apk" -type f | head -1)
        if [ -n "$APK_FILE" ]; then
          echo "APK found: $APK_FILE"
          echo "APK size: $(du -h "$APK_FILE" | cut -f1)"
        else
          echo "No APK file found"
          ls -la bin/ || echo "No bin directory"
          find .buildozer -name "*.apk" -type f || echo "No APK in .buildozer"
          exit 1
        fi
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: universal-soul-ai-full-${{ github.event.inputs.build_type || 'debug' }}-apk
        path: |
          android_overlay/bin/*.apk
          android_overlay/.buildozer/android/platform/build-*/dists/*/bin/*.apk
          android_overlay/.buildozer/**/*.log
          android_overlay/buildozer.spec
        if-no-files-found: error