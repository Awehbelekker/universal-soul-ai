name: Universal Soul AI - Android APK Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.buildozer
        key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements.txt', '**/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-deps-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3-dev \
          python3-pip \
          python3-venv \
          libssl-dev \
          libffi-dev \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo5 \
          zip \
          unzip \
          openjdk-17-jdk \
          wget \
          curl
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install buildozer cython
        pip install kivy kivymd plyer pyjnius
        pip install -r requirements.txt || true
        
    - name: Setup Android SDK
      run: |
        # Let buildozer handle Android SDK installation
        export ANDROID_HOME=/opt/android-sdk
        export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
        
    - name: Prepare build environment
      working-directory: android_overlay
      run: |
        # Create necessary directories
        mkdir -p assets bin
        
        # Generate app icon if PIL is available
        python -c "
        try:
            from PIL import Image, ImageDraw
            # Create simple icon
            icon = Image.new('RGBA', (512, 512), (25, 118, 210, 255))
            draw = ImageDraw.Draw(icon)
            # Draw circle
            margin = 50
            draw.ellipse([margin, margin, 512-margin, 512-margin], fill=(255, 255, 255, 255))
            # Save
            icon.save('assets/icon.png')
            print('‚úÖ Generated app icon')
        except Exception as e:
            print(f'‚ö†Ô∏è Could not generate icon: {e}')
            # Create placeholder
            with open('assets/icon.png', 'w') as f:
                f.write('# Placeholder icon')
        "
        
        # Generate presplash
        python -c "
        try:
            from PIL import Image, ImageDraw, ImageFont
            splash = Image.new('RGB', (1080, 1920), (25, 118, 210))
            draw = ImageDraw.Draw(splash)
            # Add text
            try:
                font = ImageFont.load_default()
                text = 'Universal Soul AI'
                bbox = draw.textbbox((0, 0), text, font=font)
                w, h = bbox[2] - bbox[0], bbox[3] - bbox[1]
                x, y = (1080 - w) // 2, (1920 - h) // 2
                draw.text((x, y), text, fill=(255, 255, 255), font=font)
            except:
                pass
            splash.save('assets/presplash.png')
            print('‚úÖ Generated splash screen')
        except Exception as e:
            print(f'‚ö†Ô∏è Could not generate splash: {e}')
            with open('assets/presplash.png', 'w') as f:
                f.write('# Placeholder splash')
        "
        
    - name: Build APK with Buildozer
      working-directory: android_overlay
      run: |
        # Initialize buildozer if needed
        if [ ! -f buildozer.spec ]; then
          buildozer init
        fi
        
        # Build APK
        buildozer android debug
        
    - name: List build artifacts
      working-directory: android_overlay
      run: |
        echo "üîç Looking for APK files..."
        find . -name "*.apk" -type f -exec ls -la {} \;
        echo "üìÅ Contents of bin directory:"
        ls -la bin/ || echo "No bin directory found"
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v3
      with:
        name: universal-soul-ai-apk
        path: android_overlay/bin/*.apk
        if-no-files-found: warn
        
    - name: Create Release
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Universal Soul AI v${{ github.run_number }}
        body: |
          üöÄ **Universal Soul AI Android APK Build #${{ github.run_number }}**
          
          **Features:**
          - ‚úÖ 360¬∞ Gesture Recognition System
          - ‚úÖ Minimalist Overlay Interface
          - ‚úÖ Voice Interface Ready
          - ‚úÖ Context-Aware Intelligence
          - ‚úÖ Privacy-First Architecture
          
          **Installation Instructions:**
          1. Download the APK file below
          2. Enable "Install from Unknown Sources" on your Android device
          3. Install the APK
          4. Grant overlay permissions when prompted
          5. Enjoy Universal Soul AI!
          
          **Built on:** ${{ github.sha }}
          **Build Date:** ${{ github.event.head_commit.timestamp }}
        files: android_overlay/bin/*.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Summary
      run: |
        echo "üéâ Build completed successfully!"
        echo "üì± APK files have been generated and uploaded"
        echo "üîó Check the Actions artifacts or Releases page to download your APK"