name: 🚀 Universal Soul AI - Manual Build (Debug Mode)

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - release
      enable_debug:
        description: 'Enable Debug Output'
        required: true
        default: true
        type: boolean
      android_api:
        description: 'Android API Level'
        required: true
        default: '29'
        type: choice
        options:
        - '28'
        - '29'
        - '30'
        - '31'

jobs:
  build:
    runs-on: ubuntu-20.04
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v3
      
    - name: 🐍 Setup Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        
    - name: ☕ Setup Java 8
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '8'
        
    - name: 🔧 Install System Dependencies
      run: |
        echo "🔄 Updating package lists..."
        sudo apt-get update -y
        
        echo "📦 Installing essential packages..."
        sudo apt-get install -y \
          git \
          python3-pip \
          python3-setuptools \
          python3-dev \
          build-essential \
          libffi-dev \
          libssl-dev
          
        echo "✅ System dependencies installed"
        
    - name: 🏗️ Install Python Build Tools
      run: |
        echo "🔄 Upgrading pip..."
        python -m pip install --upgrade pip
        
        echo "📦 Installing buildozer..."
        pip install buildozer
        
        echo "📦 Installing cython..."
        pip install "cython<3.0"
        
        echo "📦 Installing kivy..."
        pip install kivy
        
        echo "✅ Python build tools installed"
        
    - name: 🔍 Verify Installation
      run: |
        echo "=== Environment Verification ==="
        echo "Python version: $(python --version)"
        echo "Pip version: $(pip --version)"
        echo "Java version: $(java -version 2>&1 | head -1)"
        echo "Git version: $(git --version)"
        
        echo "=== Buildozer Verification ==="
        buildozer version || echo "Buildozer not accessible"
        
        echo "=== Available Space ==="
        df -h
        
    - name: 📱 Create Android App
      run: |
        echo "🏗️ Creating app directory..."
        mkdir -p universal_soul_app
        cd universal_soul_app
        
        echo "📝 Creating main.py..."
        cat > main.py << 'EOF'
        from kivy.app import App
        from kivy.uix.boxlayout import BoxLayout
        from kivy.uix.label import Label
        from kivy.uix.button import Button
        
        class UniversalSoulApp(App):
            def build(self):
                layout = BoxLayout(orientation='vertical', padding=20, spacing=20)
                
                title = Label(
                    text='Universal Soul AI',
                    font_size='24sp',
                    size_hint=(1, 0.3)
                )
                
                subtitle = Label(
                    text='Privacy-First AI Companion',
                    font_size='16sp',
                    size_hint=(1, 0.2)
                )
                
                button = Button(
                    text='Start AI Experience',
                    font_size='18sp',
                    size_hint=(1, 0.3)
                )
                
                layout.add_widget(title)
                layout.add_widget(subtitle)
                layout.add_widget(button)
                
                return layout
        
        if __name__ == '__main__':
            UniversalSoulApp().run()
        EOF
        
        echo "⚙️ Initializing buildozer..."
        buildozer init
        
        echo "📝 Creating optimized buildozer.spec..."
        cat > buildozer.spec << EOF
        [app]
        title = Universal Soul AI
        package.name = universalsoulai
        package.domain = com.universalsoul.ai
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas
        version = 1.0.0
        requirements = python3,kivy
        presplash.filename = %(source.dir)s/presplash.png
        icon.filename = %(source.dir)s/icon.png
        orientation = portrait
        osx.python_version = 3
        osx.kivy_version = 1.9.1
        fullscreen = 0
        
        [buildozer]
        log_level = ${{ github.event.inputs.enable_debug && '2' || '1' }}
        
        android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE,SYSTEM_ALERT_WINDOW
        android.api = ${{ github.event.inputs.android_api }}
        android.minapi = 21
        android.ndk = 19b
        android.sdk = ${{ github.event.inputs.android_api }}
        android.accept_sdk_license = True
        android.arch = armeabi-v7a
        EOF
        
        echo "🎨 Creating app assets..."
        # Create simple icon using Python
        python3 -c "
        from PIL import Image, ImageDraw
        import os
        
        # Create icon
        icon = Image.new('RGBA', (256, 256), (41, 128, 185, 255))
        draw = ImageDraw.Draw(icon)
        draw.ellipse([50, 50, 206, 206], fill=(255, 255, 255, 255))
        draw.ellipse([90, 90, 166, 166], fill=(41, 128, 185, 255))
        icon.save('icon.png')
        
        # Create presplash
        splash = Image.new('RGB', (800, 600), (41, 128, 185))
        splash.save('presplash.png')
        
        print('✅ Created app assets')
        " || echo "⚠️ Using fallback assets"
        
        # Fallback if PIL not available
        if [ ! -f icon.png ]; then
          echo "Creating fallback icon..."
          echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==" | base64 -d > icon.png
        fi
        
        if [ ! -f presplash.png ]; then
          echo "Creating fallback presplash..."
          cp icon.png presplash.png
        fi
        
        echo "📁 App structure created:"
        ls -la
        
    - name: 🔨 Build Android APK
      run: |
        cd universal_soul_app
        
        echo "🚀 Starting buildozer build process..."
        echo "Build Type: ${{ github.event.inputs.build_type }}"
        echo "Android API: ${{ github.event.inputs.android_api }}"
        echo "Debug Mode: ${{ github.event.inputs.enable_debug }}"
        
        if [ "${{ github.event.inputs.enable_debug }}" = "true" ]; then
          buildozer android ${{ github.event.inputs.build_type }} --verbose
        else
          buildozer android ${{ github.event.inputs.build_type }}
        fi
        
    - name: 🔍 Locate APK Files
      run: |
        cd universal_soul_app
        
        echo "🔍 Searching for APK files..."
        find . -name "*.apk" -type f -exec ls -lh {} \; || echo "No APK files found"
        
        echo "📁 Checking bin directory..."
        if [ -d bin ]; then
          ls -la bin/
        else
          echo "No bin directory found"
        fi
        
        echo "📁 Checking .buildozer directory structure..."
        if [ -d .buildozer ]; then
          find .buildozer -name "*.apk" -type f -exec ls -lh {} \; || echo "No APK in .buildozer"
        else
          echo "No .buildozer directory found"
        fi
        
    - name: 📤 Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: universal-soul-ai-${{ github.event.inputs.build_type }}-api${{ github.event.inputs.android_api }}
        path: |
          universal_soul_app/bin/*.apk
          universal_soul_app/.buildozer/android/platform/build-*/dists/*/bin/*.apk
        if-no-files-found: warn
        
    - name: 📊 Build Summary
      run: |
        echo "=== Universal Soul AI Build Summary ==="
        echo "Build Type: ${{ github.event.inputs.build_type }}"
        echo "Android API: ${{ github.event.inputs.android_api }}"
        echo "Debug Enabled: ${{ github.event.inputs.enable_debug }}"
        echo "Runner: ubuntu-20.04"
        echo "Python: $(python --version)"
        echo "Java: $(java -version 2>&1 | head -1)"
        
        cd universal_soul_app
        APK_COUNT=$(find . -name "*.apk" -type f | wc -l)
        echo "APK Files Generated: $APK_COUNT"
        
        if [ $APK_COUNT -gt 0 ]; then
          echo "✅ BUILD SUCCESSFUL!"
          echo "📱 APK ready for download from Artifacts"
        else
          echo "❌ BUILD FAILED - No APK generated"
          echo "🔍 Check the build logs above for errors"
        fi